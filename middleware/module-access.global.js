export default defineNuxtRouteMiddleware(async (to, from) => {
  // Solo ejecutar en server-side donde podemos acceder a cookies HttpOnly
  if (process.client) return

  // Mapeo de rutas a m√≥dulos requeridos
  const routeModuleMap = {
    '/marketing': 'marketing',
    '/analytics': 'analytics', 
    '/crm': 'crm',
    '/admin': 'admin'
  }

  // Verificar si la ruta requiere un m√≥dulo espec√≠fico
  const requiredModule = Object.entries(routeModuleMap).find(([route]) => 
    to.path.startsWith(route)
  )?.[1]

  // Si no requiere m√≥dulo espec√≠fico, permitir acceso
  if (!requiredModule) return

  try {
    // Verificar que tengamos token de sesi√≥n (auth middleware deber√≠a haber corrido primero)
    const sessionToken = useCookie('session-token').value
    
    if (!sessionToken) {
      console.log('‚ùå No hay token de sesi√≥n - middleware de auth deber√≠a haber manejado esto')
      return navigateTo(`/auth/login?redirect=${encodeURIComponent(to.fullPath)}`)
    }

    console.log(`üîê Verificando acceso al m√≥dulo '${requiredModule}' para ruta: ${to.path}`)

    // Verificar permisos del m√≥dulo usando token de sesi√≥n
    const hasAccess = await checkModuleAccess(requiredModule)

    if (!hasAccess) {
      console.log(`‚ùå Acceso denegado al m√≥dulo '${requiredModule}' para ruta: ${to.path}`)
      
      // Redirigir a p√°gina de error de acceso con informaci√≥n del m√≥dulo
      return navigateTo(`/error/module-access?module=${requiredModule}`)
    }

    console.log(`‚úÖ Acceso permitido al m√≥dulo '${requiredModule}' para ruta: ${to.path}`)

  } catch (error) {
    console.error('Error verificando acceso al m√≥dulo:', error)
    
    // Si es error de autenticaci√≥n, redirigir a login
    if (error.statusCode === 401) {
      console.log('‚ùå Error 401 - redirigiendo a login')
      return navigateTo(`/auth/login?redirect=${encodeURIComponent(to.fullPath)}`)
    }
    
    // Para otros errores, redirigir a p√°gina de error
    console.log(`‚ùå Error verificando m√≥dulo: ${error.message}`)
    return navigateTo(`/error/module-access?module=${requiredModule}&error=verification`)
  }
})

// Funci√≥n helper para verificar acceso al m√≥dulo usando token de sesi√≥n
async function checkModuleAccess(moduleSlug) {
  try {
    // Verificar si el tenant del usuario tiene acceso al m√≥dulo
    const response = await $fetch('/api/auth/check-module-access', {
      method: 'POST',
      body: {
        module_slug: moduleSlug
      }
    })

    return response.success && response.hasAccess

  } catch (error) {
    console.error('Error checking module access:', error)
    
    // Si es error 401, es problema de autenticaci√≥n
    if (error.statusCode === 401) {
      return false
    }
    
    // Para otros errores, denegar acceso por seguridad
    return false
  }
}