#!/usr/bin/env node

/**
 * Database Schema Documentation Updater
 * 
 * Generates DATABASE_SCHEMA.md with current database schema information
 * Runs after migrations to keep documentation in sync
 * 
 * Usage:
 *   node scripts/update-schema-docs.js
 *   npm run db:update-docs
 */

const { writeFile } = require('fs/promises');
const { Client } = require('pg');

// Environment and database connection validation
const NODE_ENV = process.env.NODE_ENV;
const DATABASE_URL = process.env.DATABASE_URL;

// Prevent running schema docs extraction in production
if (NODE_ENV === 'production') {
  console.error('❌ Schema documentation cannot be generated in production environment');
  console.error('💡 This script is only allowed in development/local environments');
  process.exit(1);
}

if (!DATABASE_URL) {
  console.error('❌ DATABASE_URL environment variable is required');
  process.exit(1);
}

console.log(`🌍 Environment: ${NODE_ENV || 'development'}`);
console.log('✅ Environment check passed - schema documentation allowed');

/**
 * Get complete database DDL using the existing PostgreSQL function
 */
async function getDatabaseDDL(client) {
  const result = await client.query('SELECT public.get_database_ddl_with_rls_and_functions();');
  return result.rows[0].get_database_ddl_with_rls_and_functions;
}

/**
 * Generate markdown documentation from DDL
 */
function generateMarkdown(ddlContent) {
  const timestamp = new Date().toISOString().split('T')[0];
  
  let markdown = `# Database Schema Documentation

*Generated on: ${timestamp}*
*Generated by: scripts/update-schema-docs.js*

This document contains the complete database schema for the Warolabs.com application, including tables, views, functions, and RLS policies.

## Complete DDL Export

\`\`\`sql
${ddlContent}
\`\`\`

---

*This documentation is automatically generated from the database using \`public.get_database_ddl_with_rls_and_functions()\`.*
*Do not edit manually. Run \`npm run db:update-docs\` to regenerate after schema changes.*
`;

  return markdown;
}

/**
 * Main function
 */
async function updateSchemaDocs() {
  const client = new Client({
    connectionString: DATABASE_URL,
  });

  try {
    console.log('🔌 Connecting to database...');
    await client.connect();
    console.log('✅ Database connected');
    
    console.log('📊 Extracting complete database schema...');
    const ddlContent = await getDatabaseDDL(client);
    console.log('✅ Database schema extracted successfully');
    
    console.log('📝 Generating documentation...');
    const markdown = generateMarkdown(ddlContent);
    
    const outputPath = 'DATABASE_SCHEMA.md';
    await writeFile(outputPath, markdown, 'utf8');
    console.log(`✅ Documentation written to ${outputPath}`);
    
    console.log('');
    console.log('🎉 Schema documentation updated successfully!');
    console.log('📄 Complete DDL including tables, views, functions, and RLS policies');
    
  } catch (error) {
    console.error('❌ Schema documentation error:', error.message);
    process.exit(1);
  } finally {
    await client.end();
    console.log('🔌 Database connection closed');
  }
}

// Run documentation update
updateSchemaDocs().catch((error) => {
  console.error('❌ Unexpected error:', error);
  process.exit(1);
});